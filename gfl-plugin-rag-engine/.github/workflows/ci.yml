name: CI for RAG Engine Plugin

# Trigger: Runs on every push or pull request to the main branch
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Tests and Check Coverage
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
      # 1. Checkout the plugin repository
      - name: 📥 Checkout plugin repository
        uses: actions/checkout@v4
        with:
          path: gfl-plugin-rag-engine

      # 2. Checkout the GFL repository (required dependency)
      #    This is crucial because the plugin depends on the GFL library,
      #    which is not yet published to PyPI
      - name: 📥 Checkout GFL repository
        uses: actions/checkout@v4
        with:
          repository: Fundacion-de-Neurociencias/GeneForgeLang
          path: GeneForgeLang
          token: ${{ secrets.GITHUB_TOKEN }}

      # 3. Set up Python environment
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      # 4. Install GFL library (local dependency)
      - name: 📦 Install GFL library
        run: |
          python -m pip install --upgrade pip
          pip install -e GeneForgeLang

      # 5. Install plugin dependencies
      - name: 📦 Install plugin dependencies
        working-directory: gfl-plugin-rag-engine
        run: |
          pip install -e .[dev]

      # 6. Display installed packages (for debugging)
      - name: 📋 List installed packages
        run: pip list

      # 7. Run test suite with coverage
      - name: 🧪 Run test suite
        working-directory: gfl-plugin-rag-engine
        run: |
          pytest tests/ \
            --verbose \
            --tb=short \
            --cov=gfl_plugin_rag_engine \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html

      # 8. Upload coverage to Codecov
      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./gfl-plugin-rag-engine/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false  # Don't fail if codecov is unavailable

      # 9. Upload coverage report as artifact
      - name: 📎 Upload coverage HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: gfl-plugin-rag-engine/htmlcov/

      # 10. Check coverage threshold (optional but recommended)
      - name: 🎯 Check coverage threshold
        working-directory: gfl-plugin-rag-engine
        run: |
          coverage report --fail-under=90

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the plugin repository
      - name: 📥 Checkout plugin repository
        uses: actions/checkout@v4
        with:
          path: gfl-plugin-rag-engine

      # 2. Set up Python
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install linting tools
      - name: 📦 Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy

      # 4. Run Black (code formatter check)
      - name: 🎨 Check code formatting with Black
        working-directory: gfl-plugin-rag-engine
        run: |
          black --check --diff gfl_plugin_rag_engine/ tests/

      # 5. Run Ruff (fast linter)
      - name: 🔍 Lint with Ruff
        working-directory: gfl-plugin-rag-engine
        run: |
          ruff check gfl_plugin_rag_engine/ tests/ || true

      # 6. Run MyPy (type checking)
      - name: 🔬 Type check with MyPy
        working-directory: gfl-plugin-rag-engine
        run: |
          mypy gfl_plugin_rag_engine/ --ignore-missing-imports || true

  security:
    name: Security Checks
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the plugin repository
      - name: 📥 Checkout plugin repository
        uses: actions/checkout@v4
        with:
          path: gfl-plugin-rag-engine

      # 2. Set up Python
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install security tools
      - name: 📦 Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      # 4. Run Bandit (security linter)
      - name: 🔒 Run Bandit security checks
        working-directory: gfl-plugin-rag-engine
        run: |
          bandit -r gfl_plugin_rag_engine/ -f json -o bandit-report.json || true
          bandit -r gfl_plugin_rag_engine/ || true

      # 5. Check dependencies for known vulnerabilities
      - name: 🛡️ Check dependencies with Safety
        working-directory: gfl-plugin-rag-engine
        run: |
          pip install -e .
          safety check --json || true
          safety check || true

  build:
    name: Build and Validate Package
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
      # 1. Checkout the plugin repository
      - name: 📥 Checkout plugin repository
        uses: actions/checkout@v4
        with:
          path: gfl-plugin-rag-engine

      # 2. Set up Python
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. Install build tools
      - name: 📦 Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      # 4. Build the package
      - name: 🏗️ Build distribution packages
        working-directory: gfl-plugin-rag-engine
        run: |
          python -m build

      # 5. Check the built package
      - name: ✅ Check distribution with Twine
        working-directory: gfl-plugin-rag-engine
        run: |
          twine check dist/*

      # 6. Upload build artifacts
      - name: 📎 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution-packages
          path: gfl-plugin-rag-engine/dist/

  # Summary job that all branch protection rules should depend on
  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()

    steps:
      - name: ✅ All checks passed
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed"
            exit 1
          fi
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "Linting failed"
            exit 1
          fi
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "Security checks failed"
            exit 1
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed"
            exit 1
          fi
          echo "🎉 All checks passed successfully!"
