
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA EXPERIMENT FALSE IDENTIFIER LBRACE NUMBER PARAMS RBRACE SIMULATE TOOL TRUE TYPEprogram : statementsstatements : statements statementstatements : statementstatement : SIMULATE IDENTIFIERstatement : EXPERIMENT LBRACE experiment_body RBRACEexperiment_body : experiment_fieldsexperiment_fields : experiment_fields experiment_fieldexperiment_fields : experiment_fieldexperiment_field : TYPE COLON IDENTIFIERexperiment_field : TOOL COLON IDENTIFIERexperiment_field : PARAMS COLON param_dictparam_dict : LBRACE param_pairs RBRACEparam_pairs : param_pairs COMMA param_pairparam_pairs : param_pairparam_pair : IDENTIFIER COLON param_valueparam_value : TRUE\n                   | FALSEparam_value : NUMBERparam_value : IDENTIFIER'
    
_lr_action_items = {'SIMULATE':([0,2,3,6,7,15,],[4,4,-3,-2,-4,-5,]),'EXPERIMENT':([0,2,3,6,7,15,],[5,5,-3,-2,-4,-5,]),'$end':([1,2,3,6,7,15,],[0,-1,-3,-2,-4,-5,]),'IDENTIFIER':([4,17,18,23,28,29,],[7,20,21,26,26,31,]),'LBRACE':([5,19,],[8,23,]),'TYPE':([8,10,11,16,20,21,22,27,],[12,12,-8,-7,-9,-10,-11,-12,]),'TOOL':([8,10,11,16,20,21,22,27,],[13,13,-8,-7,-9,-10,-11,-12,]),'PARAMS':([8,10,11,16,20,21,22,27,],[14,14,-8,-7,-9,-10,-11,-12,]),'RBRACE':([9,10,11,16,20,21,22,24,25,27,30,31,32,33,34,35,],[15,-6,-8,-7,-9,-10,-11,27,-14,-12,-13,-19,-15,-16,-17,-18,]),'COLON':([12,13,14,26,],[17,18,19,29,]),'COMMA':([24,25,30,31,32,33,34,35,],[28,-14,-13,-19,-15,-16,-17,-18,]),'TRUE':([29,],[33,]),'FALSE':([29,],[34,]),'NUMBER':([29,],[35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,6,]),'experiment_body':([8,],[9,]),'experiment_fields':([8,],[10,]),'experiment_field':([8,10,],[11,16,]),'param_dict':([19,],[22,]),'param_pairs':([23,],[24,]),'param_pair':([23,28,],[25,30,]),'param_value':([29,],[32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser_rules.py',5),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser_rules.py',9),
  ('statements -> statement','statements',1,'p_statements_single','parser_rules.py',13),
  ('statement -> SIMULATE IDENTIFIER','statement',2,'p_statement_simulate','parser_rules.py',17),
  ('statement -> EXPERIMENT LBRACE experiment_body RBRACE','statement',4,'p_statement_experiment_block','parser_rules.py',21),
  ('experiment_body -> experiment_fields','experiment_body',1,'p_experiment_body','parser_rules.py',25),
  ('experiment_fields -> experiment_fields experiment_field','experiment_fields',2,'p_experiment_fields_multiple','parser_rules.py',32),
  ('experiment_fields -> experiment_field','experiment_fields',1,'p_experiment_fields_single','parser_rules.py',36),
  ('experiment_field -> TYPE COLON IDENTIFIER','experiment_field',3,'p_experiment_field_type','parser_rules.py',40),
  ('experiment_field -> TOOL COLON IDENTIFIER','experiment_field',3,'p_experiment_field_tool','parser_rules.py',44),
  ('experiment_field -> PARAMS COLON param_dict','experiment_field',3,'p_experiment_field_params','parser_rules.py',48),
  ('param_dict -> LBRACE param_pairs RBRACE','param_dict',3,'p_param_dict','parser_rules.py',52),
  ('param_pairs -> param_pairs COMMA param_pair','param_pairs',3,'p_param_pairs_multiple','parser_rules.py',56),
  ('param_pairs -> param_pair','param_pairs',1,'p_param_pairs_single','parser_rules.py',62),
  ('param_pair -> IDENTIFIER COLON param_value','param_pair',3,'p_param_pair','parser_rules.py',66),
  ('param_value -> TRUE','param_value',1,'p_param_value_bool','parser_rules.py',70),
  ('param_value -> FALSE','param_value',1,'p_param_value_bool','parser_rules.py',71),
  ('param_value -> NUMBER','param_value',1,'p_param_value_number','parser_rules.py',75),
  ('param_value -> IDENTIFIER','param_value',1,'p_param_value_string','parser_rules.py',79),
]
