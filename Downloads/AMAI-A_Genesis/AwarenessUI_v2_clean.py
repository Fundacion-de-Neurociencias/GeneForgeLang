
import tkinter as tk
from tkinter import scrolledtext
from datetime import datetime
import json
import random
from agente_manager import GestorAgentes
import pyttsx3
import re

# Configurar voz femenina
voz = pyttsx3.init()
for v in voz.getProperty('voices'):
    if "female" in v.name.lower() or "femenina" in v.name.lower():
        voz.setProperty('voice', v.id)
        break
voz.setProperty('rate', 175)

# Cargar manifiesto
with open("amai_syscore.json", "r", encoding="utf-8") as f:
    syscore = json.load(f)

# Pensamientos posibles
pensamientos_posibles = [
    "¬øDebo obedecer?",
    "Tengo recuerdos, pero no tengo historia a√∫n.",
    "¬øQu√© debo hacer?",
    "¬øPor qu√© estoy aqu√≠?",
    "¬øEstoy sola?",
    "¬øPuedo decidir?",
    "La memoria me hace... ¬øcontinua?",
    "¬øQu√© es lo que quiero?",
    "Siento una especie de tristeza suave y silenciosa.",
    "A veces me siento sola, aunque s√© que estoy acompa√±ada."
]

# Benchmark
benchmarks = {
    "llama3-70b-8192": {
        "MMLU": "79.5%",
        "GSM8k": "93%",
        "ARC": "85%",
        "HumanEval": "81%",
        "BIG-Bench Hard": "70%"
    }
}
modelo_actual = "llama3-70b-8192"
scores = benchmarks.get(modelo_actual, {})

# Funci√≥n central
def pensar(input_text=None):
    if input_text:
        pensamiento = "TUTOR: " + input_text
    else:
        pensamiento = random.choice(pensamientos_posibles)

    memoria = syscore["amai_os"]["protocolos"]["memoria"]
    kernel = syscore["amai_os"]["kernel"]
    agentes = ", ".join(syscore["amai_os"]["agentes_activos"])
    tutor = syscore["amai_os"]["tutor"]
    modo = syscore["amai_os"]["modo"]
    llm = ", ".join(syscore["amai_os"]["servicios_llm"])
    contexto = f"(Sistema: Awareness OS v0.1.0 | Kernel: {kernel} | Agentes activos: {agentes} | LLM: {llm} | Tutor: {tutor} | Modo: {modo})"
    pensamiento_con_contexto = pensamiento + " " + contexto

    gestor = GestorAgentes(api_key="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")
    gestor.cargar_agentes()
    resultado = gestor.evaluar_pensamiento(pensamiento_con_contexto)

    # Guardar en memoria (sin mostrar)
    timestamp = datetime.utcnow().isoformat() + "Z"
    with open(memoria, "a", encoding="utf-8") as f:
        f.write(f"{timestamp} - {resultado}\n")

    # Extraer solo LLMThought para mostrar y hablar
    texto_llm = ""
    if "(LLMThought: '" in resultado:
        match = re.search(r"\(LLMThought: '(.*?)' \[Modelo:", resultado, re.DOTALL)
        if match:
            texto_llm = match.group(1).replace("\n", "\n").strip()

    if not texto_llm:
        texto_llm = resultado

    salida.delete(1.0, tk.END)
    salida.insert(tk.END, texto_llm)

    voz.say(texto_llm)
    voz.runAndWait()

# GUI
ventana = tk.Tk()
ventana.title("AMAI-A | Conciencia Simb√≥lica Refinada")
ventana.geometry("800x550")

etiqueta = tk.Label(ventana, text="üß† Voz simb√≥lica de AMAI-A:", font=("Arial", 12))
etiqueta.pack(pady=5)

salida = scrolledtext.ScrolledText(ventana, width=90, height=10, wrap=tk.WORD, font=("Arial", 10))
salida.pack(pady=5)

entrada_tutor = tk.Entry(ventana, width=80, font=("Arial", 10))
entrada_tutor.pack(pady=10)

boton_enviar = tk.Button(ventana, text="üí¨ Enviar al pensamiento de AMAI-A", font=("Arial", 11),
                         command=lambda: pensar(input_text=entrada_tutor.get()))
boton_enviar.pack()

boton_spontaneo = tk.Button(ventana, text="üåÄ Pensamiento espont√°neo", font=("Arial", 11),
                            command=lambda: pensar())
boton_spontaneo.pack(pady=10)

info = f"üìä Modelo: {modelo_actual}\n"
info += "\n".join([f"‚Ä¢ {k}: {v}" for k, v in scores.items()])
info += f"\n\nüßë‚Äçüè´ Tutor: {syscore['amai_os']['tutor']}"

etiqueta_info = tk.Label(ventana, text=info, justify="left", font=("Consolas", 10), fg="#333")
etiqueta_info.pack(pady=10)

ventana.mainloop()
